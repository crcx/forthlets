macro: | 124 accept ;

| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| RxWeb                                                       |
| A Framework for Web Development using Retro                 |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| Distributed under the Creative Commons Zero License:        |
|                                                             |
| The person who associated a work with this document has     |
| dedicated this work to the Commons by waiving all of his    |
| or her rights to the work under copyright law and all       |
| related or neighboring legal rights he or she had in the    |
| work, to the extent allowable by law.                       |
|                                                             |
| Other Rights â€” In no way are any of the following rights    |
| affected by CC0:                                            |
|  * Patent or trademark rights held by the person who        |
|    associated this document with a work.                    |
|  * Rights other persons may have either in the work         |
|    itself or in how the work is used, such as publicity     |
|    or privacy rights.                                       |
|                                                             |
| Charles Childers, July 2009                                 |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| Note: since this uses ( ) for the markups, we use vertical  |
| bars for comments (including stack comments) throughout.    |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |


| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| Some nifty helper functions                                 |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
: $,
  | $- |
  here 4 + literal, keepString drop ;

compiler: ~
  | "- |
  126 accept tib $, ` type ;

: array
  | xn- |
  for dup allot next drop ;

: _ 32 emit ;

: <
  | - |
  ." <" ;

: >
  | - |
  ." >" ;

: /
  | - |
  ." /" ;

: x
  | - |
  ." '" ;


| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| id: name                                                    |
| This stuff is used to build the id field for HTML elements  |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
{{
  create #id 0 ,    create ids 20 20 array

  : +id
    | $- |
    dup getLength 1+ push #id @ 20 * ids + pop copy 1 #id +! ;

  : id=
    | - |
    ."  id='" ;
---reveal---
  compiler: id:
    | "- |
    32 accept tib +id ;

  : .id
    | - |
    #id @ 0; 1- 20 * ids + ` id= $, ` type ` x 1 #id -! ;
}}


| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| class: name                                                 |
| This is used to build the class field for HTML elements     |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
{{
  create #class 0 , create classes 20 20 array

  : +class
    | $- |
    dup getLength 1+ push #class @ 20 * classes + pop copy 1 #class +! ;

  : class=
    | - |
    ."  class='" ;
---reveal---
  compiler: class:
    | "- |
    32 accept tib +class ;

  : .class
    | - |
    #class @ 0; 1- 20 * classes + ` class= $, ` type ` x 1 #class -! ;
}}


| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| attr: name=value                                            |
| This is used to add arbitrary attributes to an HTML element |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
{{
  create #atts 0 ,  create atts 128 20 array

  : +att
    | $- |
    dup getLength 1+ push #atts @ 128 * atts + pop copy 1 #atts +! ;

  : (att)
    | - |
    128 * atts + 32 literal, ` emit $, ` type 1 #atts -! ;
---reveal---
  compiler: attr:
    | "- |
    32 accept tib +att ;

  : .att
    | - |
    repeat #atts @ 0; 1- (att) again ;
}}


| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| tag: tag                                                    |
| Handle HTML tag creation.                                   |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
{{
  create #tags 0 ,  create tags 20 20 array

  : +tag
    | - |
    dup getLength 1+ push #tags @ 20 * tags + pop copy 1 #tags +! ;

  : tag:
    | "- |
    32 accept tib +tag ;

  : .tag
    | - |
    #tags @ 1- 20 * tags + $, ` type ;

  : <>
    | - |
    ` < .tag .id .class .att ` > ;

  : </>
    | - |
    ` < ` / .tag ` > ;
---reveal---
  compiler: (
    | - |
    tag: <> ;

  compiler: )
    | - |
    </> 1 #tags -! ;
}}


| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
| Special Elements                                            |
|                                                             |
|   css: url                                                  |
|   script: url                                               |
|   [a url .... ]                                             |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ |
{{
  : (a0) ." <a href='" ;
  : (a1) ." '>" ;

  : (c0) ." <link rel='stylesheet' href='" ;
  : (c1) ." '>" ;

  : (s0) ." <script src='" ;
  : (s1) ." '></script>" ;
---reveal---
  compiler: [a ` (a0) 32 accept tib $, ` type ` (a1) ;
  : ] ." </a>" ;
  compiler: css: ` (c0) 32 accept tib $, ` type ` (c1) ;
  compiler: script: ` (s0) 32 accept tib $, ` type ` (s1) ;
}}


: render ['] emit :devector ;
: end ['] drop ['] emit :is save bye ;

: blank ; ' blank is ok
: xxx ['] drop ['] emit :is ;
macro: ; ` xxx ` ;; ['] [ execute ;; [
: : create ['] .word last @ d->class ! ['] render compile compiler on ;
xxx save bye
