( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Web Framework for Retro                                     )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: array for 20 allot next ;

create #tags 0 ,  create tags 20 array
create #id 0 ,    create ids 20 array
create #class 0 , create classes 20 array

: $, here 4 + literal, keepString ;
macro: ~ 126 accept tib $, ` type ;
: +id dup getLength 1+ push #id @ 20 * ids + pop copy 1 #id +! ;
: +class dup getLength 1+ push #class @ 20 * classes + pop copy 1 #class +! ;
: class= ."  class='" ;
: id= ."  id='" ;
: x ." '" ;
: .class #class @ 0; 1- 20 * classes + ` class= $, ` type ` x 1 #class -! ;
: .id #id @ 0; 1- 20 * ids + ` id= $, ` type ` x 1 #id -! ;
: .tag #tags @ 1- 20 * tags + here 4 + literal, keepString ` type ;
: +tag dup getLength 1+ push #tags @ 20 * tags + pop copy 1 #tags +! ;
macro: id: 32 accept tib +id ;
macro: class: 32 accept tib +class ;
: < ." <" ;
: > ." >" ;
: / ." /" ;
: <> ` < .tag .id .class ` > ;
: </> ` < ` / .tag ` > ;
compiler: ( 32 accept tib +tag <> ;
macro: ) </> 1 #tags -! ;


: page
  ( html
    ( head
      ( title ." Demo" )
    )
    ( body
      id: header class: redtext ( h1 ." Hello" )
      ( p ." This is a test." )
    )
  )
;


: demo
( html
  ( head
    ( title ." RetroWeb Documentation" )
  )
  ( body
    ( h1 ." RetroWeb" )
    ( p ~ RetroWeb is an extension of Retro for creating HTML documents.
          It features a readable and elegant Lisp-like syntax to ease writing XHTML.
          It is quite small, very extensible and gives you the full power of Forth when you need it.
        ~
    ( h2 ." Current: 2.0" )
    ( h3 ." What's new?" )
    ( ul
      ( li ." Rewritten for Retro 10" )
      ( li ." Documents stored in words" )
      ( li ." Entire web content stored in image" )
    )
  )
)
;
