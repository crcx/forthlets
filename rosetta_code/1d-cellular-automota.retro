( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Single-Dimensional Cellular Automota                      )
( or, Life in 1D                                            )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( The rules:                                                )
(                                                           )
(   # = live cell                                           )
(   . = dead cell                                           )
(                                                           )
( ... -> .  |                                               )
( ..# -> .  |                                               )
( .#. -> .  | Dies without enough neighbours                )
( .## -> #  | Needs one neighbour to survive                )
( #.. -> .  |                                               )
( #.# -> #  | Two neighbours giving birth                   )
( ##. -> #  | Needs one neighbour to survive                )
( ### -> .  | Starved to death.                             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Distributed under the Creative Commons Zero License:      )
(                                                           )
( The person who associated a work with this document has   )
( dedicated this work to the Commons by waiving all of his  )
( or her rights to the work under copyright law and all     )
( related or neighboring legal rights he or she had in the  )
( work, to the extent allowable by law.                     )
(                                                           )
( Other Rights â€” In no way are any of the following rights  )
( affected by CC0:                                          )
(  * Patent or trademark rights held by the person who      )
(    associated this document with a work.                  )
(  * Rights other persons may have either in the work       )
(    itself or in how the work is used, such as publicity   )
(    or privacy rights.                                     )
(                                                           )
( Charles Childers, July 2009                               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Some useful support functions                             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
macro: ~ 32 accept tib @ .data ;
: $, dup getLength 0 swap for 2dup + @ , 1+ next 2drop 0 , ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( world  = current generation                               )
( world2 = next generation                                  )
( group  = current 3 symbol group                           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
create world   " .###.##.#.#.#.#..#.." $,
create world2 21 allot
create group   4 allot
variable neighbors

: middle ( - )
  0 neighbors !
  group     @ ~ # =if 1 neighbors +! then
  group 2 + @ ~ # =if 1 neighbors +! then
;

: left.edge ( - )
  world @ ~ # =if 1 neighbors ! ;then 0 neighbors !
;
: right.edge ( - )
  world 19 + @ ~ # =if 1 neighbors ! ;then 0 neighbors !
;
: flip ( n-n )
  dup world + @ ~ # =if ~ . ;then ~ # ;
;

: check ( n-n )
  dup 0 =if left.edge ;then
  dup 19 =if right.edge ;then
  dup world + 1- group 3 copy middle
;

: gen ( - )
  0 20 for
    0 neighbors !
    check
    neighbors @ 0 =if dup world2 + ~ . swap ! then
    neighbors @ 1 =if dup world + @ over world2 + ! then
    neighbors @ 2 =if flip over world2 + ! then
    1+
  next drop
  world2 world 20 copy
;

: generations ( n- )
  clear 0 swap for dup . 32 emit world type cr gen 1+ next drop ;

10 generations
bye
