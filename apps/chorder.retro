( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Chord Keyboard ["chorder"]                                )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Distributed under the Creative Commons Zero License:      )
(                                                           )
( The person who associated a work with this document has   )
( dedicated this work to the Commons by waiving all of his  )
( or her rights to the work under copyright law and all     )
( related or neighboring legal rights he or she had in the  )
( work, to the extent allowable by law.                     )
(                                                           )
( Other Rights â€” In no way are any of the following rights  )
( affected by CC0:                                          )
(  * Patent or trademark rights held by the person who      )
(    associated this document with a work.                  )
(  * Rights other persons may have either in the work       )
(    itself or in how the work is used, such as publicity   )
(    or privacy rights.                                     )
(                                                           )
( Charles Childers, December 2009                           )
( Luke Parrish, December 2009                               )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

ifNotDefined rem { bye }

rem

vocab chord
((
{{
  : default: ' 2 + compile ; compile-only
  : def.key  ( "- ) default: key ;
  : def.emit ( -" )  default: emit ;

  : chorder.list ( -a ) s" awefjio;" ;
  : chorder.len  ( -n ) chorder.list getLength ;

  variable chorder:lastkey
  variable chorder:offset
  : command ( c-c )
    dup char: z =if pop drop bye ;then
    dup char: u =if 0 chorder:offset ! drop def.key ;then
    dup char: h =if 64 chorder:offset ! drop def.key ;then
    dup char: q =if rem:ins off
    ['] rem.key :devector ['] rem.write :devector ;then
  ;

  : tonum   ( k-n )
    chorder.len for
      r 1- chorder.list + @ over =if drop pop 1- ;then
    next ;

---reveal---
  : chorder.filter ( n-nf )
    dup 8   =if TRUE ;then
    dup 10  =if TRUE ;then
    dup 31 128 within if TRUE ;then
    FALSE ;
  : chorder.emit  ( n-" )
    chorder.filter if def.emit ;then drop ;
  : chorder.write ( n- )
    swap chorder.filter if swap ! ;then 2drop ;

  : chorder.key   ( "-n )
    def.key command tonum 8 *
    def.key command tonum
    chorder:offset @ + +  ;
  : chorder
    repeat
      chorder.key
      dup . cr
      chorder.emit cr
    again ;
}}
))

: $$q ['] chorder.key   ['] rem.key :is ['] chorder.write ['] rem.write :is rem.in ;

chord rem
